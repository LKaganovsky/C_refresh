USING GETADDRINFO()
Defined as folows:

    int getaddrinfo( 
        const char* node,
        const char* service, 
        const struct addrinfo* hints,
        struct addrinfo** res
    );

Explanation is as follows:
    - "node" is the hostname or address as a string, such as "127.0.0.1" or "example.com"
    - "service" is the port number as a string, may be a number or protocol name such as "80" or "http"
    - "hints" is a pointer to an addrinfo structure, defined as follows:
        struct addrinfo {
            int                 ai_flags,
            int                 ai_family,
            int                 ai_socktype,
            int                 ai_protocol,
            socklen_t           ai_addrlen,
            struct sockaddr*    ai_addr,
            char                canonname,
            struct addrinfo*    ai_next
        }

    Note that the fields above may or may not be stored in this order, it depends on the operating system.

The call to getaddrinfo() examines 4 fields of the hints structure: ai_family, ai_socktype, ai_protocol and 
ai_flags. The rest of the structure should be zeroed out with memset. The four fields may contain the following 
values:
    -   ai_family: The desired address family.
        -   AF_INET for IPv4.
        -   AF_INET6 for IPv6.
        -   AF_USPEC for either IPv4 or IPv6. Defined as 0.
    -   ai_socktype: The desired type of socket.
        -   SOCK_STREAM for TCP.
        -   SOCK_DGRAM for UDP.
    -   ai_protocol: The desired protocol.
        -   This should be left to 0 in most cases. TCP is not the only streaming protocol supported by the 
            socket interface, and UDP is not the only datagram protocol. Typically, ai_protocol is used to 
            disambiguate, but is not necessary for most programs.
    - ai_flags: The desired flags.
        -   AI_NUMERICHOST can be used to prevent name lookups--that is to say, only allowing numerical network 
            addresses (such as 127.0.0.1) and not hostnames (like example.com). As DNS lookups may be lengthy, it 
            may be wise to use this flag when the numerical address is already known to save time.
        -   AI_NUMERICSERV works similarly, preventing service names (such as http) from being entered as a 
            service and instead forces them to be entered as numbers (like 80).
        -   AI_ALL can be used to request either an IPv4 or IPv6 address (TODO: Isn't this what AF_INET/AF_INET6 
            is supposed to be for?).
        -   AI_ADDRCONFIG can be used to obtain addresses only if they match a configured interface on the local 
            system--IPv4 addresses will be returned only if the system has at least one IPv4 address, and IPv6 
            addresses will be returned only if the system has at least one IPv6 address. Note that the loopback 
            address is not considered a valid configured address. This flag may be useful for niche systems which 
            do not support dual-stack IP addressing, ensuring that getaddrinfo() does not return an IPv6 address 
            on an IPv4-only system which would cause bind() and connect() to fail every time (TODO: So can 
            getaddrinfo() return addresses without network adapters?).
        -   AI_PASSIVE can be used with node=0 to request the wildcard address, the local address which accepts 
            connections on any of the host's network addresses. It is used with bind() on servers. If AI_PASSIVE 
            is set and node is not 0, then AI_PASSIVE will have no effect.
        -   Flags can be combined using bitwise OR operations (a | between flags).

The final parameter to getaddrinfo(), res, is a pointer to a pointer to struct addrinfo which will store the 
results of getaddrinfo() in a linked list.

On a sucessful execution, getaddrinfo() will return 0. Once an address has been selected and bound to a socket, 
use freeaddrinfo() to clear the linked list.

USING GETNAMEINFO()
The getnameinfo() function is the functional inverse of getaddrinfo(), converting address information into 
readable text. The function is defined as follows:

    int getnameinfo(
        const struct sockaddr*  addr,
        socklen_t               addrlen,
        char*                   host, 
        socklen_t               hostlen,
        char*                   serv, 
        socklen_t               servlen,
        int                     flags
    );

The first two parameters, addr and addrlen, are the ai_addr and ai_addrlen fields of struct addrinfo. host and 
hostlen specify a buffer and the length of that buffer where the host name will be saved, serv and servlen 
perform the same purpose. 0 can be passed into any field you do not need. Flags may be a bitwise OR combination 
of the following:
    -   NI_NAMEREQD can be used to make getnameinfo() return a hostname instead of an address. By default, the 
        function will try to return a hostname, but will return an address if that fails. If getnameinfo() has 
        been called with this flag, it will return an error if it cannot get a hostname.
    -   NI_DGRAM can be used to specify that the service is based on UDP, not TCP. This is only really important 
        for ports that have different standard servies for TCP and UDP. If the NI_NUMERICHOST flag is set, this 
        flag is ignored. (TODO: )
    -   NI_NUMERICHOST can be used to make getnameinfo() return an IP address instead of a hostname.
    -   NI_NUMERICSERV can be used to make getnameinfo() return a port number instead of a service name.

The getnameinfo() function essentially performs a reverse DNS lookup. Whereas a regular DNS lookup has a client 
requesting the IP address associated with a hostname, getnameinfo() requests the hostname associated with an IP 
address. Note that this relationship is rarely one-to-one--a hostname may have many IP addresses associated with 
it, but each IP address only stores a DNS record for one hostname.

The getnameinfo() function is used like so:

    char host[100];
    char serv[100];
    int getnameinfo(
        address->ai_addr,
        address->ai_addrlen,
        host, 
        sizeof(host), 
        serv, 
        sizeof(serv), 
        0);
    printf("%s %s\n", host, serv);

In the above example, if address is a struct addrinfo with the address for example.com port 80 (http) then the 
code may print something like the following:

    example.com http

If we instead would like the IP address and port number, then we can replace the 0 flag with NI_NUMERICHOST | 
NI_NUMERICSERV and get something like the following:

    93.184.216.34 80

Adding NI_NUMERICHOST actually speeds up execution of getnameinfo() since the function does not need to perform a 
reverse DNS lookup.

THE DNS PROTOCOL
In a typical exchange, a client sends a DNS query to a DNS server over UDP using port 53, and the DNS server 
performs the lookup (if possible) and responds with an answer. In the event that the query (or more commonly, 
the answer) is too large to fit into a single UDP packet, then the size of the query is sent over in a TCP packet 
as a 16 bit value, followed by the query itself. This is known as TCP fallback or DNS transport over TCP.

DNS MESSAGE FORMAT
Every DNS message, whether a query or answer, follows this format:

    -   Header: Information about the message
    -   Question: Question for the name server
    -   Answer: Answer from the name server
    -   Authority: Pointers to other name servers
    -   Additional: Additional information

Clients sending DNS queries will leave the latter three sections blank, and responses often leave the latter two 
sections blank.

DNS MESSAGE HEADER FORMAT:
The header is a constant 12 bytes and follows the same format between queries and answers.
    -   ID: Any 16 bit value used to identify the DNS message. Any 16 bits can go here, and the DNS server will 
        copy these into the ID for the answer.
    -   QR: A 1 bit field which indicates if a DNS message is a query (0) or response (1).
    -   OPCODE: A 5 bit field which signifies the specific type of query. This field only allows for four 
        values--standard (0), reverse (1), server status request (2). Values 3 to 15 are reserved for future 
        use.
    -   AA: Indicates an authoritative answer.
    -   TC: Indicates that the message was truncated and requires resending over TCP.
    -   RD: Indicates that the sender desires a recursive search--that is, the server will contact other servers 
        until the request is completed.
    -   RA: Indicates whether the DNS server supports recursion or not.
    -   Z: Unused.
    -   RCODE: Error code, 0 is expected (no error).
    -   QDCOUNT, ANCOUNT, NSCOUNT, ARCOUNT: The number of records for each corresponding section--number of 
        entries in the question section (though this is always 1), answer section, name server resource records 
        in the authority records section, and additional records.

DNS QUESTION FORMAT
The DNS question format consists of the following values:
    -   NAME: A specially encoded field consisting of a hostname broken up into individual labels, each label is 
        prepended with a byte representing the length of the label. The name is terminated with a 0 byte.
        -   3 w w w 7 e x a m p l e 3 c o m 0
    -   QTYPE: A 16 bit field representing the type of record requested.
    -   QCLASS: A 16 bit field, for our purposes, should always be set to 1 to indicate "internet"

ANSWER FORMAT
The DNS answer format contains the same three fields as the DNS question, but with several changes:
    -   NAME: An owner name, the name of the node to which this resource record pertains to.
    -   TYPE: A 16 bit field representing the type of record requested (RR TYPE?).
    -   CLASS: A 16 bit field representing the type of class requested (RR CLASS?).
    -   TTL: A 32 bit signed integer field specifying the record's "time to live," the time it may be cached for 
        by the client (in seconds).
        RDLENGTH: A 16 bit unsigned integer representing the length of the follwing data.

Note that a DNS answer may need to repeat a name multiple times. In this case, the DNS server may encode a 
pointer to an earlier name rather than sending the name multiple times in every response message. A pointer is 
indicated by a 16 bit value with the two highest bits set--the remaining 14 bits specify the location of the 
name as an offset from the beginning of the message. 

ENDIANNESS
When considering the storage of numbers, most will assume they are stored in the same order as they are written, 
with the most significant digit first, followed by digits of decreasing significance. However, this is not the 
case for all operating systems--while most store bytes in a "big endian" format, with the most significant bit 
first, some store numbers in the "little endian" format with the least significant bit first. These terms also 
apply to the order in which bytes are sent over a network.

Consider for example the number 0x05 (5 in decimal). Sending this over a network is trivial--as a single byte, 
there is no ambiguity how to send it. But for a number like 0x03E7 (3*256 + 231 = 999 in decimal) which requires 
two bytes, the question of which byte to send first comes into play.

Numbers in DNS messages are kept in network byte order (that is, big endian). According to this, 0x0eE7 would be 
sent as 0x03 followed by 0xE7.
